// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"test/20250503/interface/db/model"
)

func newLink(db *gorm.DB, opts ...gen.DOOption) link {
	_link := link{}

	_link.linkDo.UseDB(db, opts...)
	_link.linkDo.UseModel(&model.Link{})

	tableName := _link.linkDo.TableName()
	_link.ALL = field.NewAsterisk(tableName)
	_link.ID = field.NewInt32(tableName, "ID")
	_link.Name = field.NewString(tableName, "name")
	_link.URL = field.NewString(tableName, "url")
	_link.PathsID = field.NewInt32(tableName, "paths_ID")
	_link.CreatedAt = field.NewTime(tableName, "created_at")
	_link.UpdatedAt = field.NewTime(tableName, "updated_at")

	_link.fillFieldMap()

	return _link
}

type link struct {
	linkDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	URL       field.String
	PathsID   field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (l link) Table(newTableName string) *link {
	l.linkDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l link) As(alias string) *link {
	l.linkDo.DO = *(l.linkDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *link) updateTableName(table string) *link {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "ID")
	l.Name = field.NewString(table, "name")
	l.URL = field.NewString(table, "url")
	l.PathsID = field.NewInt32(table, "paths_ID")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *link) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *link) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["ID"] = l.ID
	l.fieldMap["name"] = l.Name
	l.fieldMap["url"] = l.URL
	l.fieldMap["paths_ID"] = l.PathsID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l link) clone(db *gorm.DB) link {
	l.linkDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l link) replaceDB(db *gorm.DB) link {
	l.linkDo.ReplaceDB(db)
	return l
}

type linkDo struct{ gen.DO }

type ILinkDo interface {
	gen.SubQuery
	Debug() ILinkDo
	WithContext(ctx context.Context) ILinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILinkDo
	WriteDB() ILinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILinkDo
	Not(conds ...gen.Condition) ILinkDo
	Or(conds ...gen.Condition) ILinkDo
	Select(conds ...field.Expr) ILinkDo
	Where(conds ...gen.Condition) ILinkDo
	Order(conds ...field.Expr) ILinkDo
	Distinct(cols ...field.Expr) ILinkDo
	Omit(cols ...field.Expr) ILinkDo
	Join(table schema.Tabler, on ...field.Expr) ILinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILinkDo
	Group(cols ...field.Expr) ILinkDo
	Having(conds ...gen.Condition) ILinkDo
	Limit(limit int) ILinkDo
	Offset(offset int) ILinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkDo
	Unscoped() ILinkDo
	Create(values ...*model.Link) error
	CreateInBatches(values []*model.Link, batchSize int) error
	Save(values ...*model.Link) error
	First() (*model.Link, error)
	Take() (*model.Link, error)
	Last() (*model.Link, error)
	Find() ([]*model.Link, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Link, err error)
	FindInBatches(result *[]*model.Link, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Link) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILinkDo
	Assign(attrs ...field.AssignExpr) ILinkDo
	Joins(fields ...field.RelationField) ILinkDo
	Preload(fields ...field.RelationField) ILinkDo
	FirstOrInit() (*model.Link, error)
	FirstOrCreate() (*model.Link, error)
	FindByPage(offset int, limit int) (result []*model.Link, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l linkDo) Debug() ILinkDo {
	return l.withDO(l.DO.Debug())
}

func (l linkDo) WithContext(ctx context.Context) ILinkDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l linkDo) ReadDB() ILinkDo {
	return l.Clauses(dbresolver.Read)
}

func (l linkDo) WriteDB() ILinkDo {
	return l.Clauses(dbresolver.Write)
}

func (l linkDo) Session(config *gorm.Session) ILinkDo {
	return l.withDO(l.DO.Session(config))
}

func (l linkDo) Clauses(conds ...clause.Expression) ILinkDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l linkDo) Returning(value interface{}, columns ...string) ILinkDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l linkDo) Not(conds ...gen.Condition) ILinkDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l linkDo) Or(conds ...gen.Condition) ILinkDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l linkDo) Select(conds ...field.Expr) ILinkDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l linkDo) Where(conds ...gen.Condition) ILinkDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l linkDo) Order(conds ...field.Expr) ILinkDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l linkDo) Distinct(cols ...field.Expr) ILinkDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l linkDo) Omit(cols ...field.Expr) ILinkDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l linkDo) Join(table schema.Tabler, on ...field.Expr) ILinkDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l linkDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILinkDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l linkDo) RightJoin(table schema.Tabler, on ...field.Expr) ILinkDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l linkDo) Group(cols ...field.Expr) ILinkDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l linkDo) Having(conds ...gen.Condition) ILinkDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l linkDo) Limit(limit int) ILinkDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l linkDo) Offset(offset int) ILinkDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l linkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l linkDo) Unscoped() ILinkDo {
	return l.withDO(l.DO.Unscoped())
}

func (l linkDo) Create(values ...*model.Link) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l linkDo) CreateInBatches(values []*model.Link, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l linkDo) Save(values ...*model.Link) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l linkDo) First() (*model.Link, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Link), nil
	}
}

func (l linkDo) Take() (*model.Link, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Link), nil
	}
}

func (l linkDo) Last() (*model.Link, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Link), nil
	}
}

func (l linkDo) Find() ([]*model.Link, error) {
	result, err := l.DO.Find()
	return result.([]*model.Link), err
}

func (l linkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Link, err error) {
	buf := make([]*model.Link, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l linkDo) FindInBatches(result *[]*model.Link, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l linkDo) Attrs(attrs ...field.AssignExpr) ILinkDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l linkDo) Assign(attrs ...field.AssignExpr) ILinkDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l linkDo) Joins(fields ...field.RelationField) ILinkDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l linkDo) Preload(fields ...field.RelationField) ILinkDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l linkDo) FirstOrInit() (*model.Link, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Link), nil
	}
}

func (l linkDo) FirstOrCreate() (*model.Link, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Link), nil
	}
}

func (l linkDo) FindByPage(offset int, limit int) (result []*model.Link, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l linkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l linkDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l linkDo) Delete(models ...*model.Link) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *linkDo) withDO(do gen.Dao) *linkDo {
	l.DO = *do.(*gen.DO)
	return l
}
